
package ApiCommonWebsite::View::GraphPackage::PlasmoDB::Winzeler;

=pod

=head1 Summary

Makes the plots for the Winzler developmental time series experiments.
The data consist of two time series generated by different means
(sorbitol and temperature) of synchronzing the population as well as
separate measurements of expression in the sporozoite stage.

The sorbitol series has covers the gametocyte stage which is not
covered by the temperature series.  Because the labeling is so whacky
we define the condition names in the code rather than retriving them
from GUS.

Data is shown in a bar plot to avoid the suggestion of continuous,
connected change.

Data that is below a cutff is deemed to be not reliable and is shown
in gray.

=cut

# ========================================================================
# ----------------------------- Declarations -----------------------------
# ========================================================================

use strict;
use vars qw( @ISA );

@ISA = qw( ApiCommonWebsite::View::GraphPackage );

use ApiCommonWebsite::View::GraphPackage;
use ApiCommonWebsite::View::MultiScreen;
use ApiCommonWebsite::Model::CannedQuery::Profile;
use ApiCommonWebsite::Model::CannedQuery::ElementNames;

# ========================================================================
# ----------------------- Create, Init, and Access -----------------------
# ========================================================================

# --------------------------------- init ---------------------------------

sub init {
   my $Self = shift;
	 my $Args = ref $_[0] ? shift : {@_};

   $Self->SUPER::init($Args);

	 $Self->setShortNamesQuery            ( $Args->{ShortNamesQuery     } );
	 $Self->setSorbitolExpressionQuery    ( $Args->{SorbitolExpressionQuery   } );
	 $Self->setSorbitolPercentileQuery    ( $Args->{SorbitolPercentileQuery   } );
	 $Self->setSorbitolLogPQuery          ( $Args->{SorbitolLogPQuery         } );
	 $Self->setTemperatureExpressionQuery ( $Args->{TemperatureExpressionQuery} );
	 $Self->setTemperaturePercentileQuery ( $Args->{TemperaturePercentileQuery} );
	 $Self->setTemperatureLogPQuery       ( $Args->{TemperatureLogPQuery      } );
	 $Self->setSporozoiteExpressionQuery  ( $Args->{SporozoiteExpressionQuery } );
	 $Self->setSporozoitePercentileQuery  ( $Args->{SporozoitePercentileQuery } );
	 $Self->setSporozoiteLogPQuery        ( $Args->{SporozoiteLogPQuery       } );

   return $Self;
}

# ========================================================================
# ----------------------- Symbolic Access to Data ------------------------
# ========================================================================

sub getShortNamesQuery            { $_[0]->{'ShortNamesQuery'           } }
sub setShortNamesQuery            { $_[0]->{'ShortNamesQuery'           } = $_[1]; $_[0] }

sub getSorbitolExpressionQuery    { $_[0]->{'SorbitolExpressionQuery'   } }
sub setSorbitolExpressionQuery    { $_[0]->{'SorbitolExpressionQuery'   } = $_[1]; $_[0] }

sub getSorbitolPercentileQuery    { $_[0]->{'SorbitolPercentileQuery'   } }
sub setSorbitolPercentileQuery    { $_[0]->{'SorbitolPercentileQuery'   } = $_[1]; $_[0] }

sub getSorbitolLogPQuery          { $_[0]->{'SorbitolLogPQuery'         } }
sub setSorbitolLogPQuery          { $_[0]->{'SorbitolLogPQuery'         } = $_[1]; $_[0] }

sub getTemperatureExpressionQuery { $_[0]->{'TemperatureExpressionQuery'} }
sub setTemperatureExpressionQuery { $_[0]->{'TemperatureExpressionQuery'} = $_[1]; $_[0] }

sub getTemperaturePercentileQuery { $_[0]->{'TemperaturePercentileQuery'} }
sub setTemperaturePercentileQuery { $_[0]->{'TemperaturePercentileQuery'} = $_[1]; $_[0] }

sub getTemperatureLogPQuery       { $_[0]->{'TemperatureLogPQuery'      } }
sub setTemperatureLogPQuery       { $_[0]->{'TemperatureLogPQuery'      } = $_[1]; $_[0] }

sub getSporozoiteExpressionQuery  { $_[0]->{'SporozoiteExpressionQuery' } }
sub setSporozoiteExpressionQuery  { $_[0]->{'SporozoiteExpressionQuery' } = $_[1]; $_[0] }

sub getSporozoitePercentileQuery  { $_[0]->{'SporozoitePercentileQuery' } }
sub setSporozoitePercentileQuery  { $_[0]->{'SporozoitePercentileQuery' } = $_[1]; $_[0] }

sub getSporozoiteLogPQuery        { $_[0]->{'SporozoiteLogPQuery'       } }
sub setSporozoiteLogPQuery        { $_[0]->{'SporozoiteLogPQuery'       } = $_[1]; $_[0] }

# ========================================================================
# ------------------------------- Methods --------------------------------
# ========================================================================

sub makeR {
   my $Self = shift;

   my @Rv;

   my $id = $Self->getId();

   my $_qh   = $Self->getQueryHandle();
   my $_dict = {};

	 my $fmt       = $Self->getFormat();

   my $thumb_b   = $Self->getThumbnail();

	 my @_names    = qw( S ER LR ET LT ES LS M G ); #$Self->getShortNames()->getValues($_qh, $_dict);
	 my $names     = join(',', map {qq{"$_"}} @_names);
	 my $names_n   = scalar @_names;

   my $r_f  = $Self->getOutputFile(). '.R';
   my $r_fh = FileHandle->new(">$r_f") ||
   die "Can not open R file '$r_f': $!";

   my @errors;

   my $sorbExp_f = eval { $Self->getSorbitolExpressionQuery(   )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);
   my $sorbPct_f = eval { $Self->getSorbitolPercentileQuery(   )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);
   #my $sorbLgp_f = eval { $Self->getSorbitolLogPQuery(         )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);

   my $tempExp_f = eval { $Self->getTemperatureExpressionQuery()->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);
   my $tempPct_f = eval { $Self->getTemperaturePercentileQuery()->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);
   #my $tempLgp_f = eval { $Self->getTemperatureLogPQuery(      )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);

   my $sporExp_f = eval { $Self->getSporozoiteExpressionQuery( )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);
   my $sporPct_f = eval { $Self->getSporozoitePercentileQuery( )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);
   #my $sporLgp_f = eval { $Self->getSporozoiteLogPQuery(       )->makeTabFile($_qh, $_dict) }; $@ && push(@errors, $@);

   if (@errors) {
      $Self->reportErrorsAndBlankGraph($r_fh, @errors);
   }

   else {

      my $_mS = ApiCommonWebsite::View::MultiScreen->new
      ( Parts => [ { Name => 'LEGEND', Size => 40  },
                   { Name => 'rat',    Size => 240 },
                   { Name => 'pct',    Size => 150 },
                   { Name => 'logabs',    Size => 150 },
                   { Name => 'abs',    Size => 150 },
                 ],
        VisibleParts  => $Self->getVisibleParts(),
        Thumbnail     => $thumb_b,
      );

      # used in R code to branch
      my %isVis_b = $_mS->partIsVisible();

      my $width = 480;
      my $totalHeight = $_mS->totalHeight();
      if ($thumb_b) {
         $width        = 250;
         $totalHeight *= 0.8;
      }

      # used in R code to set locations of screens
      my $screens     = $_mS->rScreenVectors();
      my $parts_n     = $_mS->numberOfVisibleParts();

      my $open_R    = $Self->rOpenFile($width, $totalHeight);
      my $preamble_R = $Self->_rStandardComponents($thumb_b);

      #+++ 
      ## this can be moved into GraphPackage shortly.
      ## predefined constants
      #my @allParts =  qw( LEGEND rat pct abs );
      #my %partWeights     = ( LEGEND => 40,
      #                        rat    => 240,
      #                        pct    => 120,
      #                        abs    => 120,
      #                      );
      ## processing inputs

      #my @parts = @{$Self->getVisibleParts()} ? @{$Self->getVisibleParts()} : @allParts;
      #my $parts_n = scalar @parts;
      #my %parts = map { ( $_ => 0 ) } @allParts;
      #foreach (@parts) { $parts{$_} = 1 }

      #my $totalWeight     = CBIL::Util::V::sum(map { $partWeights{$_} } @parts);
      #my %partProportions = map {
      #   ( $_ => $parts{$_} ? $partWeights{$_}/$totalWeight : 0 )
      #} @allParts;

      #my $start = 1.0;
      #my %starts;
      #foreach (@allParts) {
      #   $starts{$_} = $start;
      #   $start -= $partProportions{$_}
      #}

      #my $width           = 480;
      #my $totalHeight     = CBIL::Util::V::sum(map { $partWeights{$_} } @parts);
      #if ($thumb_b) {
      #   $width        = 250;
      #   $totalHeight *= 0.8;
      #}
      #my $open_R    = $Self->rOpenFile($width, $totalHeight);

      #my $top     = 1.0;
      #my @screens = map {
      #   $top -= $partProportions{$_};
      #   sprintf('c(0,1,%f,%f)', $top, $top + $partProportions{$_})
      #} @parts;
      #my $screens = join(', ', @screens);

      #my $preamble_R = $Self->_rStandardComponents($thumb_b);

      print $r_fh <<R;

# ------------------------------ Libraries -------------------------------

$preamble_R

# ------------------------------ Constants -------------------------------

cutoff.exp <- 3;

color.temp       <- rgb(153,   0, 153, max=255);
color.sorb       <- rgb(  0, 153, 153, max=255);
color.spor       <- "black";
color.unreliable <- "gray50";

# ------------------------------ Load Data -------------------------------

data.names       <- c($names);

data.sorb.exp    <- read.table("$sorbExp_f", header=T);
data.sorb.pct    <- read.table("$sorbPct_f", header=T);

data.temp.exp    <- read.table("$tempExp_f", header=T);
data.temp.pct    <- read.table("$tempPct_f", header=T);

data.spor.exp    <- read.table("$sporExp_f", header=T);
data.spor.pct    <- read.table("$sporPct_f", header=T);

# ---------------------------- Compute Colors ----------------------------

colors.sorb <- ifelse((data.sorb.exp\$VALUE <= cutoff.exp), color.unreliable, color.sorb);
colors.temp <- ifelse((data.temp.exp\$VALUE <= cutoff.exp), color.unreliable, color.temp);
colors.spor <- ifelse((data.spor.exp\$VALUE <= cutoff.exp), color.unreliable, color.spor);

if (colors.sorb[8] == color.sorb) colors.sorb[8] <- color.spor;

# ------------------------ Merge Data and Colors -------------------------

data.track1.mean.exp <- mean(data.sorb.exp\$VALUE);
data.track2.mean.exp <- mean(data.temp.exp\$VALUE);

data.track1.exp      <- c(data.spor.exp\$VALUE, data.sorb.exp\$VALUE);
data.track2.exp      <- c(data.spor.exp\$VALUE, data.temp.exp\$VALUE);

#data.track1.rat      <- log(data.track1.exp / data.track1.mean.exp) / log(2.0);
#data.track2.rat      <- log(data.track2.exp / data.track2.mean.exp) / log(2.0);
data.track1.rat      <- data.track1.exp - data.track1.mean.exp;
data.track2.rat      <- data.track2.exp - data.track2.mean.exp;
data.track2.rat[1]   <- data.track1.rat[1];

data.track1.pct      <- c(data.spor.pct\$VALUE, data.sorb.pct\$VALUE);
data.track2.pct      <- c(0,                    data.temp.pct\$VALUE, NA);
data.track2.exp[1]   <- 0;

colors.track1        <- c(colors.spor, colors.sorb);
colors.track2        <- c(colors.spor, colors.temp, "white");

ylim.rat             <- c(max(-10,min(-2,min(data.track1.rat, data.track2.rat))),
                          min( 10,max( 2,max(data.track1.rat, data.track2.rat)))
                         );

data.track2.exp[$names_n] <- 0;
data.track2.rat[$names_n] <- 0;
data.track2.pct[$names_n] <- 0;

data.exp         <- t(matrix(c(data.track1.exp, data.track2.exp), ncol=2));
data.rat         <- t(matrix(c(data.track1.rat, data.track2.rat), ncol=2));
data.pct         <- t(matrix(c(data.track1.pct, data.track2.pct), ncol=2));
colors           <- t(matrix(c(colors.track1, colors.track2), ncol=2));

# --------------------------- Prepare To Plot ----------------------------

# open output file; set general plotting parameters; get ready to make
# three subplots.

$open_R;

plasmodb.par();

screen.dims <- t(array(c($screens),dim=c(4,$parts_n)));
screens     <- split.screen(screen.dims, erase=T);
screens;
screen.i    <- 1;

# ------------------ SCREEN : Legend -----------------------------------

if ($isVis_b{LEGEND} == 1) {
  screen(screens[screen.i]);
  screen.i <- screen.i + 1;

  par(yaxs="i", xaxs="i", xaxt="n", yaxt="n", bty="n", mar=c(0.1,0.1,0.1,0.1));
  plot(c(0),c(0), xlab='', ylab='',type="l",col="orange", xlim=c(0,1),ylim=c(0,1));

  legend(0.5, 0.5,
         c("sorbitol", "temperature", "sporozoite", "gametocyte", "below bkg"),
         xjust = 0.5,
         yjust = 0.5,
         cex   = 0.90,
         bty   = "n",
         lty   = "solid",
         col   = c(color.sorb, color.temp, color.spor, color.spor, color.unreliable),
         pt.bg = c(color.sorb, color.temp, color.spor, color.spor, color.unreliable),
         pch   = 22,
         horiz = T
        );
}


# ----------------- SCREEN : Induction and Repression ------------------

# plot points for both data sets, draw line at 0-induction, draw
# connecting lines, add X-axis line.

if ($isVis_b{rat} == 1) {
  screen(screens[screen.i]);
  screen.i <- screen.i + 1;

  plot(data.track1.rat,
       ylim      = ylim.rat,
       pch       = 22,
       cex       = 1.25,
       col       = colors.track1,
       bg        = colors.track1,
       ylab      = "log2(Exp/Avg)",
       xaxt      = "n"
      );
  points(data.track2.rat,
         pch       = 22,
         cex       = 1.25,
         col       = colors.track2,
         bg        = colors.track2
       );

  lines (x = seq(2,7),
         y = data.track1.rat[seq(2,7)],
         type    = "c",
         col     = "gray80"
        );
  lines (seq(2,7),
         data.track2.rat[seq(2,7)],
         type    = "c",
         col     = "gray80"
        );

  axis(1,at=seq(1,9),labels=data.names,tick=T);
  plasmodb.grid(nx=NA,ny=NULL);
  lines (c(-100,100), c(0,0), col="gray25");
  plasmodb.title("Induction/Repression");
}

# ---------------------- SCREEN : Percentile Plot ----------------------

# do bar plot, try to get x-axis line.

if ($isVis_b{pct} == 1) {
  screen(screens[screen.i]);
  screen.i <- screen.i + 1;
  barplot(data.pct,
          beside    = 1,
          space     = c(0.1, 1),
          ylab      = "%",
          names.arg = data.names,
          col       = colors,
          border    = colors,
          ylim      = c(0,100),
          axis.lty  = "solid"
         );
  plasmodb.title("Expression levels (percentiled)");
}

# ---------------------- SCREEN 3 : Absolute Levels ----------------------

# do bar plot, try to get x-axis line.

if ($isVis_b{logabs} == 1) {
  screen(screens[screen.i]);
  screen.i <- screen.i + 1;

  plasmodb.par.last();
  barplot(data.exp,
          beside    = 1,
          space     = c(0.1, 1),
          names.arg = data.names,
          col       = colors,
          border    = colors,
          ylab      = "Expression",
          axis.lty  = "solid",
          cex.axis  = 0.75
        );
  plasmodb.title("Expression levels (log2 absolute)");
}

if ($isVis_b{abs} == 1) {
  screen(screens[screen.i]);
  screen.i <- screen.i + 1;

  plasmodb.par.last();
  barplot( 2^data.exp,
          beside    = 1,
          space     = c(0.1, 1),
          names.arg = data.names,
          col       = colors,
          border    = colors,
          xlab      = "Life Stage",
          ylab      = "Expression",
          axis.lty  = "solid",
          cex.axis  = 0.75
        );
  plasmodb.title("Expression levels (absolute)");
}



# --------------------------------- Done ---------------------------------

# close the graphics file and quit.

dev.off();

quit(save="no");

R
   }

   $r_fh->close();

   push(@Rv, $r_f,
				$sorbExp_f, $sorbPct_f,# $sorbLgp_f,
				$tempExp_f, $tempPct_f,# $tempLgp_f,
				$sporExp_f, $sporPct_f #, $sporLgp_f
			 );

   return @Rv;
}

# ========================================================================
# ---------------------------- End of Package ----------------------------
# ========================================================================

1;
