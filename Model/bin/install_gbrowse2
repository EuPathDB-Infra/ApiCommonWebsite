#!/bin/sh

# Install modified GBrowse and BioPerl from ApicommonWebsite files.

# Requires same webPropFile used in WDK build

GBROWSE_SRC_PATH=$PROJECT_HOME/ApiCommonWebsite/Site/doc/gbrowse/src

GBROWSE_SRC_DIR=GBrowse
BIOPERL_SRC_DIR=BioPerl
BIOGRAPHICS_SRC_DIR=BioGraphics

BUILD_DIR=$GBROWSE_SRC_PATH/gbrowse_build_tmp

get_install_paths() {
    WEB_PROP_FILE=$1
    if [ ! -e "$WEB_PROP_FILE" ]; then 
        echo "specified webPropFile '$WEB_PROP_FILE' not found"
        exit 1
    fi
    set_env_from_prop_file "$WEB_PROP_FILE"
}

set_env_from_prop_file() {
    while read prop
    do
     export $(echo "$prop" |  \
        sed "/^ *#/d;         \
             /^[ \t]*$/d;     \
             s/ *= */=/"      \
     ) > /dev/null
    done < "$1"    
}

mkdirs() {
    echo "INSTALL: making install directories...."
    mkdir $htdocsTargetDir 2>/dev/null
    mkdir $cgibinTargetDir 2>/dev/null
    mkdir $cgilibTargetDir 2>/dev/null
    mkdir $GUS_HOME/lib/gbrowse 2>/dev/null
}

post_install_clean() {

    rm -rf $BUILD_DIR

    tmpfiles=( _build Build blib INSTALL.SKIP htdocs/tmp lib/Bio/Graphics/Browser2/CAlign.c )

    echo "Cleaning up temporary files..."
    for tmp in ${tmpfiles[@]}; do
      echo "Deleting $GBROWSE_SRC_PATH/$GBROWSE_SRC_DIR/$tmp"
      rm -rf $GBROWSE_SRC_PATH/$GBROWSE_SRC_DIR/$tmp
    done
}

copy_without_svn() {
    srcdir=$1
    destdir=$2
    cd $srcdir
    for file in `find . | grep -v "\.svn" | sed 's/^\.\///' | sort`; do
        if [[ -d $srcdir/$file && ( ! -d $destdir/$file ) ]]; then
            #echo "Making dir: $destdir"
            mkdir $destdir/$file
        fi
        if [[ -f $srcdir/$file ]]; then
            #echo "Copying $file to $destdir/$file"
            cp $srcdir/$file $destdir/$file
        fi
    done
    cd -
}

install_local_bioperl() {
    echo "INSTALL: installing bioperl...."
    copy_without_svn $GBROWSE_SRC_PATH/$BIOPERL_SRC_DIR $cgilibTargetDir
}

install_local_biographics() {
    echo "INSTALL: installing bioperl...."
    copy_without_svn $GBROWSE_SRC_PATH/$BIOGRAPHICS_SRC_DIR $cgilibTargetDir
}

configure_gb() {
    
    mkdirs
    install_local_bioperl
    install_local_biographics

    export PERL5LIB=$cgilibTargetDir:$PERL5LIB
    if ! perl -e 'use Bio::Perl 1.5' 2> /dev/null; then
        echo "BioPerl 1.5 or greater is required but not found."
        echo "(@INC contains:" `perl -e "print join ' ', @INC"` ")"
        exit 1
    fi

    cd $GBROWSE_SRC_PATH/$GBROWSE_SRC_DIR
    echo "INSTALL: perl Build.PL..."

    # Build.PL have_c_compiler() uses ExtUtils::CBuilder::Base to test compile sample C code 
    # in File::Spec->tmpdir, which is /tmp unless $TMPDIR is set. 
    # Using /tmp causes race conditions when several sites are built at once
    # and the /tmp/compilet.c objects get deleted from one build while still in use by another.
    # So we must ensure that each have_c_compiler() is isolated.
    mkdir -p $BUILD_DIR
    export TMPDIR=$BUILD_DIR

    perl Build.PL  --htdocs=$htdocsTargetDir/gbrowse                          \
                   --conf=$GUS_HOME/lib/gbrowse                               \
                   --tmp=$htdocsTargetDir/gbrowse/tmp                         \
                   --persistent=$cgilibTargetDir/persistent                   \
                   --databases=$cgilibTargetDir/persistent/databases          \
                   --cgibin=$cgibinTargetDir                                  \
                   --bin=$cgibinTargetDir/bin                                 \
                   --prefix=$GUS_HOME                                         \
                   --wwwuser=$USER                                            \
                   --install_path arch=$cgilibTargetDir                       \
                   --install_path lib=$cgilibTargetDir

}

build_install() {
    echo "INSTALL: Build install..."
    perl Build install
    if [ "$?" -gt 0 ]; then
        echo
        echo "Install failed to complete properly."
        exit 1
    fi
}

usage() {
    echo $"Usage: $(basename $0) {webPropFile} {build|build_install|build_install_patch|patch_only}"
    exit 1
}

##################################################################

if [ ! -n "$1" ] && [ ! -n "$2" ]; then
    usage
fi

get_install_paths $1

case "$2" in
    build)
        configure_gb    
        post_install_clean
        ;;
    build_install)
        configure_gb    
        build_install
        post_install_clean
        ;;
    build_install_patch)
        # keep this command for backward compatibility
        configure_gb    
        build_install
        post_install_clean
        ;;
    *)
        usage
        ;;
esac

exit 0
