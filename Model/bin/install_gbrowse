#!/bin/sh

# Unpack and install GBrowse and BioPerl 5 from ApicommonWebsite archived 
# files.

# Requires same webPropFile used in WDK build


GBROWSE_TAR_PATH=$PROJECT_HOME/ApiCommonWebsite/Site/doc/gbrowse
GBROWSE_TAR_FILE=Generic-Genome-Browser-1.64.tar.gz
BIOPERL_TAR_FILE=bioperl_1.5_cvs_20061129.tgz

BUILD_DIR=$GBROWSE_TAR_PATH/gbrowse_build_tmp

get_install_paths() {
    WEB_PROP_FILE=$1
    if [ ! -e "$WEB_PROP_FILE" ]; then 
        echo "specified webPropFile '$WEB_PROP_FILE' not found"
        exit 1
    fi
    eval `< $WEB_PROP_FILE`
}

mkdirs() {
    mkdir $htdocsTargetDir 2>/dev/null
    mkdir $cgibinTargetDir 2>/dev/null
    mkdir $cgilibTargetDir 2>/dev/null
    mkdir $confTargetDir 2>/dev/null
}

unpack_gbrowse_src() {
    if ! (
        mkdir -p $BUILD_DIR && 
        tar zxf \
        $GBROWSE_TAR_PATH/$GBROWSE_TAR_FILE \
        --strip-path 1 \
        -C $BUILD_DIR 2> /dev/null); then
        echo "FATAL: Unable to un-tar Generic-Genome-Browser package '$GBROWSE_TAR_PATH/$GBROWSE_TAR_FILE'. Exiting..."
        exit 1
    fi
}

post_install_clean() {
    if [ ! -d "$BUILD_DIR" ]; then
        return
    fi
    if ! rm -rf  $BUILD_DIR; then
    echo "WARNING: Unable to remove temporary Gbrowse build directory '$BUILD_DIR'"
    fi
}

# unpack and install pre-made BioPerl 5 into cgi-lib
install_local_bioperl() {
    if ! tar zxf \
        $GBROWSE_TAR_PATH/$BIOPERL_TAR_FILE \
        -C $cgilibTargetDir 2> /dev/null; then
        echo "FATAL: Unable to un-tar BioPerl package '$GBROWSE_TAR_PATH/$BIOPERL_TAR_FILE'. Exiting..."
        echo "tar zxf \
        $GBROWSE_TAR_PATH/$BIOPERL_TAR_FILE \
        -C $cgilibTargetDir"
        exit 1
    fi
}

configure_gb() {

    mkdirs
    
    install_local_bioperl
    
    export PERL5LIB=$cgilibTargetDir:$PERL5LIB
    if ! perl -e 'use Bio::Perl 1.5' 2> /dev/null; then
        echo "BioPerl 1.5 or greater is required but not found."
        echo "(@INC contains:" `perl -e "print join ' ', @INC"` ")"
        exit 1
    fi
        
    unpack_gbrowse_src
    
    cd $BUILD_DIR
    
    perl Makefile.PL HTDOCS=$webappTargetDir    \
                     CONF=$confTargetDir        \
                     CGIBIN=$cgibinTargetDir    \
                     LIB=$cgilibTargetDir       \
                     BIN=$cgibinTargetDir       \
                     NONROOT=1                  \
                     SELINUX=1 
     
    if [ "$?" -gt 0 ]; then
        echo
        echo "make test failed. unable to continue."
        exit 1
    fi
}

make_all() {
    echo .......make.........
    make
    
    if [ "$?" -gt 0 ]; then
        echo
        echo "make failed. unable to continue."
        exit 1
    fi
}

make_test() {
    make test
     
    if [ "$?" -gt 0 ]; then
        echo
        echo "make test failed. Cowardly refusing to install."
        exit 1
    fi
}

make_install() {
    make install
    if [ "$?" -gt 0 ]; then
        echo
        echo "Install failed to complete properly."
        exit 1
    fi
}

patch_all() {
    patch -d $cgibinTargetDir -b -N -i $GBROWSE_TAR_PATH/patches/gbrowse_img_1_64.patch
    patch -d $cgibinTargetDir -b -N -i $GBROWSE_TAR_PATH/patches/gbrowse_1_64_presets.patch
    patch -d $confTargetDir/gbrowse.conf/languages -b -N -i $GBROWSE_TAR_PATH/patches/POSIX.pm_1_64_presets.patch
}


usage() {
    echo $"Usage: $(basename $0) {webPropFile} {make|make_test|make_install|make_install_patch|patch_only}"
    exit 1
}

##################################################################

if [ ! -n "$1" ] && [ ! -n "$2" ]; then
    usage
fi

get_install_paths $1

case "$2" in
    make)
        configure_gb    
        make_all
        post_install_clean
        ;;
    make_test)
        configure_gb    
        make_all
        make_test
        post_install_clean
        ;;
    make_install)
        configure_gb    
        make_all
        make_test
        make_install
        post_install_clean
        ;;
    make_install_patch)
        configure_gb    
        make_all
        make_test
        make_install
        patch_all
        post_install_clean
        ;;
    patch_only)
        patch_all
        ;;
    *)
        usage
        ;;
esac

exit 0
